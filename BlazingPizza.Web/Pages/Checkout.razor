@page "/checkout"
@using BlazingPizza.Model
@using BlazingPizza.Services
@implements IDisposable
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm EditContext="_editContext" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order"/>
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                @if (_isError)
                {
                    <div class="alert alert-danger">Please enter a name and address.</div>
                }
                <AddressEditor Address="Order.DeliveryAddress"/>
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="Submit" disabled="@_isError">
            Place order
        </button>

        <DataAnnotationsValidator/>
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;
    bool _isError;

    private EditContext _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(Order.DeliveryAddress);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    private async Task PlaceOrder()
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync(
            $"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        _isError = !_editContext.Validate();
        StateHasChanged();
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= HandleFieldChanged;
    }

}